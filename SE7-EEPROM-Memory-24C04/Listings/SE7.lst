C51 COMPILER V9.60.7.0   SE7                                                               04/16/2023 18:52:04 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SE7
OBJECT MODULE PLACED IN .\Objects\SE7.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SE7.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\SE7.l
                    -st) TABS(2) OBJECT(.\Objects\SE7.obj)

line level    source

   1          #include<reg51.h>
   2          
   3          sfr LCD = 0xA0; // P2 = LCD Data pins
   4          sbit RS = P0^5; // Register Select(RS) pin of 16*2 LCD
   5          sbit RW = P0^6; // Read/Write (RW) pin of 16*2 LCd
   6          sbit EN = P0^7; // Enable (E) pin of 16*2 LCD
   7          
   8          sbit SDA = P3^1;  // SDA pin of EEPROM
   9          sbit SCL = P3^0;  // SCL pin of EEPROM
  10          /*
  11            SCL : The SCL input is used to positive edge clock data into each
  12            EEPROM device and negative edge clock data out of each device.
  13            SDA : The SDA pin is bidirectional for serial data transfer. This pin is
  14            open-drain driven and may be wire-ORed with any number of other open-drain or 
  15            opencollector devices.
  16          
  17          */
  18          
  19          void LCD_CMD(unsigned char x);
  20          void LCD_DATA(char w);
  21          void LCD_INIT(void);
  22          void Send_Data(unsigned char *Str);
  23          void msDelay(unsigned int Time);
  24          void EEPROM_Start();
  25          void EEPROM_Stop();
  26          void EEPROM_Ack();
  27          void EEPROM_Send(unsigned char Data);
  28          unsigned char EEPROM_Read();
  29          void EEPROM_WriteByte(unsigned char Data , unsigned char Address , unsigned char Page);
  30          unsigned char EEPROM_ReadByte(unsigned char Address , unsigned char Page);
  31          unsigned int i;
  32          
  33          void main(void)
  34          {
  35   1        char Data[] = "EEPROM"; // Data for writing in EEPROM
  36   1        msDelay(10);
  37   1        LCD_INIT();
  38   1        
  39   1        for (i = 0 ; i < 15 ; i++)
  40   1        {
  41   2          EEPROM_WriteByte(Data[i] , i , 0);
  42   2        }
  43   1        
  44   1        for (i = 0 ; i < 15 ; i++)
  45   1        {
  46   2          LCD_DATA(EEPROM_ReadByte(i , 0));
  47   2        }
  48   1        
  49   1        while(1);
  50   1        
  51   1      }
  52          
  53          void LCD_DATA(char w)
  54          {
C51 COMPILER V9.60.7.0   SE7                                                               04/16/2023 18:52:04 PAGE 2   

  55   1        LCD = w;
  56   1        RS = 1; // data mode
  57   1        RW = 0; // read
  58   1        EN = 1;
  59   1        msDelay(1);
  60   1        EN = 0;
  61   1        return;
  62   1          
  63   1      
  64   1      void LCD_CMD(unsigned char x)
*** ERROR C141 IN LINE 64 OF SE7.c: syntax error near 'void', expected '__asm'
  65   1      {
  66   1        LCD = x;
  67   1        RS = 0; // command mode
  68   1        RW = 0; // read
  69   1        EN = 1;
  70   1        msDelay(1);
  71   1        EN = 0;
  72   1        return;
  73   1      }
  74          
  75          void LCD_INIT(void)
  76          {
  77   1        msDelay(100);
  78   1        LCD_CMD(0x38);  //  2 lines and 5×7 matrix
  79   1        LCD_CMD(0x0E);  // Display ON, cursor blinking
  80   1        LCD_CMD(0x01);  // Clear display screen
  81   1      }
  82          
  83          void msDelay(unsigned int Time)
  84          {
  85   1        unsigned int y, z;
  86   1        for(y = 0 ; y < Time ; y++)
  87   1        for(z = 0 ; z < 500 ; z++); // For Loops for Delay
  88   1      }
  89          
  90          void Delay(unsigned char Time)
  91          {
  92   1        unsigned char y;
  93   1        for(y = 0 ; y < Time ; y++);  // For Loop for delay
  94   1      }
  95          
  96          void EEPROM_Start()
  97          {
  98   1        /*
  99   1          Start is identified by a falling edge of serial data (SDA) while serial clock (SCL) is stable in the hig
             -h state. A start
 100   1          condition must precede any data transfer instruction. The device continuously monitors (except during a 
             -write
 101   1          cycle) serial data (SDA) and serial clock (SCL) for a start condition.
 102   1          from datasheet
 103   1        */
 104   1        SCL = 0;  //  Clock Input = disable
 105   1        SDA = 1;  // Data I/O = enable
 106   1        Delay(30);  // Delay
 107   1        SCL = 1;  // Clock Input 
 108   1        Delay(30);  // Delay
 109   1        SDA = 0;
 110   1        Delay(30);  //Delay
 111   1        SCL = 0;
 112   1      }
 113          
C51 COMPILER V9.60.7.0   SE7                                                               04/16/2023 18:52:04 PAGE 3   

 114          void EEPROM_Stop()
 115          {
 116   1        /*
 117   1          Stop is identified by a rising edge of serial data (SDA) while serial clock (SCL) is stable in the high 
             -state. A stop
 118   1          condition terminates communication between the device and the bus master. A read instruction that is fol
             -lowed by
 119   1          NoAck can be followed by a stop condition to force the device into the standby mode.
 120   1          A stop condition at the end of a write instruction triggers the internal write cycle.
 121   1          from datasheet
 122   1        */
 123   1        SCL = 0;  // Clock Input = 0
 124   1        Delay(30);
 125   1        SDA = 0;  // Data I/O = 0
 126   1        Delay(30);
 127   1        SCL = 1;  // Clock Input = 1
 128   1        Delay(30);
 129   1        SDA = 1;  // Data Input = 1
 130   1      }
 131          
 132          void EEPROM_Ack()
 133          {
 134   1        /*
 135   1          The acknowledge bit is used to indicate a successful byte transfer. The bus transmitter, whether it be b
             -us master
 136   1          or slave device, releases serial data (SDA) after sending eight bits of data. During the 9th clock pulse
             - period, the
 137   1          receiver pulls serial data (SDA) low to acknowledge the receipt of the eight data bits.
 138   1        */
 139   1        SDA = 0;
 140   1        Delay(30);
 141   1        SCL = 1;
 142   1        Delay(30);
 143   1        SCL = 0;
 144   1        SDA = 1;
 145   1      }
 146          
 147          void EEPROM_Send(unsigned char Data)
 148          {
 149   1        unsigned char i;
 150   1        
 151   1        for (i = 0 ; i < 8 ; i++) // For loop for sending data bit by bit
 152   1        {
 153   2          SDA = Data & 0x80;  // AND with 1000000 for sending the MSB (Most Significant Bit)
 154   2          SCL = 1;
 155   2          SCL = 0;
 156   2          Data <<= 1; // Shift Sata with 1  for prepaing the next bit to bed sent
 157   2        }
 158   1        
 159   1        EEPROM_Ack(); // Call EEPROM Acknowledge
 160   1        /*
 161   1          EEPROM Acknowledge: 
 162   1        */
 163   1      }
 164          
 165          unsigned char EEPROM_Read()
 166          {
 167   1        unsigned char i , Data = 0;
 168   1        for(i = 0 ; i < 8 ; i++)
 169   1        {
 170   2          Delay(20);
 171   2          SCL = 1;
C51 COMPILER V9.60.7.0   SE7                                                               04/16/2023 18:52:04 PAGE 4   

 172   2          Data |= SDA;
 173   2          if (i < 7)
 174   2            Data <<= 1;
 175   2          SCL = 0;
 176   2        }
 177   1        return Data;
 178   1      }
 179          
 180          void EEPROM_WriteByte(unsigned char Data, unsigned char Address , unsigned char Page)
 181          {
 182   1        EEPROM_Start();
 183   1        EEPROM_Send(0xA0|(Page<<1));  // Page Number
 184   1        EEPROM_Send(Address);
 185   1        EEPROM_Send(Data);
 186   1        EEPROM_Stop();
 187   1        Delay(10);
 188   1      }
 189          
 190          unsigned char EEPROM_ReadByte(unsigned char Address , unsigned char Page)
 191          {
 192   1        unsigned char Data;
 193   1        
 194   1        EEPROM_Start();
 195   1        EEPROM_Send(0xA0|(Page<<1));
 196   1        EEPROM_Send(Address);
 197   1        EEPROM_Start();
 198   1        EEPROM_Send(0x0A|(Page<<1));
 199   1        Data = EEPROM_Read();
 200   1        EEPROM_Stop();
 201   1        Delay(5);
 202   1        return Data;
 203   1      }
 204          

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
